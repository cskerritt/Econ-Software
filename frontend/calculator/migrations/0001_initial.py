# Generated by Django 5.0 on 2024-12-22 15:06

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="EconomicAnalysis",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("first_name", models.CharField(max_length=100)),
                ("last_name", models.CharField(max_length=100)),
                ("date_of_birth", models.DateField()),
                ("date_of_injury", models.DateField()),
                ("date_of_report", models.DateField()),
                (
                    "worklife_expectancy",
                    models.FloatField(
                        help_text="Expected remaining years of work life",
                        validators=[django.core.validators.MinValueValidator(0.0)],
                    ),
                ),
                (
                    "years_to_final_separation",
                    models.FloatField(
                        help_text="Years until final separation from work",
                        validators=[django.core.validators.MinValueValidator(0.0)],
                    ),
                ),
                (
                    "life_expectancy",
                    models.FloatField(
                        help_text="Expected remaining years of life",
                        validators=[django.core.validators.MinValueValidator(0.0)],
                    ),
                ),
                (
                    "pre_injury_base_wage",
                    models.FloatField(
                        help_text="Base annual wage at date of injury",
                        validators=[django.core.validators.MinValueValidator(0.0)],
                    ),
                ),
                (
                    "post_injury_base_wage",
                    models.FloatField(
                        help_text="Base annual wage at date of report",
                        validators=[django.core.validators.MinValueValidator(0.0)],
                    ),
                ),
                (
                    "growth_rate",
                    models.FloatField(
                        default=0.042,
                        help_text="Annual growth rate (e.g., 0.03 for 3%)",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "adjustment_factor",
                    models.FloatField(
                        default=0.754,
                        help_text="Adjustment Impact Factor (e.g., 0.754 for 75.4%)",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(2.0),
                        ],
                    ),
                ),
                (
                    "apply_discounting",
                    models.BooleanField(
                        default=True,
                        help_text="Whether to apply discounting to post-injury earnings",
                    ),
                ),
                (
                    "discount_rate",
                    models.FloatField(
                        blank=True,
                        default=0.04,
                        help_text="Annual discount rate (e.g., 0.04 for 4%)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "has_residual_capacity",
                    models.BooleanField(
                        default=False,
                        help_text="Whether there is residual earning capacity",
                    ),
                ),
                (
                    "residual_base_wage",
                    models.FloatField(
                        blank=True,
                        default=0.0,
                        help_text="Base annual residual earning capacity",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Economic Analysis",
                "verbose_name_plural": "Economic Analyses",
            },
        ),
        migrations.CreateModel(
            name="PostInjuryRow",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("year", models.IntegerField()),
                (
                    "portion_of_year",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ]
                    ),
                ),
                ("age", models.FloatField()),
                (
                    "wage_base_years",
                    models.FloatField(
                        validators=[django.core.validators.MinValueValidator(0.0)]
                    ),
                ),
                (
                    "analysis",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="post_injury_rows",
                        to="calculator.economicanalysis",
                    ),
                ),
            ],
            options={
                "ordering": ["year"],
            },
        ),
        migrations.CreateModel(
            name="PreInjuryRow",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("year", models.IntegerField()),
                (
                    "portion_of_year",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ]
                    ),
                ),
                ("age", models.FloatField()),
                (
                    "wage_base_years",
                    models.FloatField(
                        validators=[django.core.validators.MinValueValidator(0.0)]
                    ),
                ),
                (
                    "analysis",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pre_injury_rows",
                        to="calculator.economicanalysis",
                    ),
                ),
            ],
            options={
                "ordering": ["year"],
            },
        ),
    ]
